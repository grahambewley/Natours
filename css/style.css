@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

*,
*::after,
*::before {
  margin: 0px;
  padding: 0px;
  box-sizing: inherit;
  /* by using inherit here, all elements will inherit from the border-box set on body (which is border-box) */ }

/*
    html:
    We want to use 10px as our font-size so that it is easy to calculate rem values later on.
    But, if we set font-size here using pixels, it will not allow users to set their own browser default font sizes.
    Default browser font size is 16px, so we're starting with 10/16 or 62.5%.
*/
html {
  font-size: 62.5%; }

body {
  box-sizing: border-box;
  /* border-box means borders and padding are not calculated into total size of elements */ }

body {
  font-family: Lato, sans-serif;
  font-weight: 400;
  /*font-size: 16px;*/
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: white;
  text-transform: uppercase;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    /* Animations are not allowed on non-block style elements */
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }

.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  font-size: 1.6rem;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 100rem;
  position: relative;
  transition: all 0.2s; }

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
  .btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0; }

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777; }
  .btn--white::after {
    background-color: #fff; }

.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 100rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s; }

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  animation-fill-mode: backwards; }

.row {
  max-width: 114rem;
  background-color: #eee;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    background-color: orangered;
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 3rem; }
  .row .col-1-of-2 {
    width: calc((100% - 3rem) /2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 3rem)/3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 3rem)/3) + 3rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 3rem)/4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 3rem)/4) + 3rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 3rem)/4) + 2 * 3rem); }

.header {
  height: 95vh;
  /* vh means viewport height, useful for hero images, etc. */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  background-size: cover;
  background-position: top;
  /* This will keep the top of the image at the top of the div, so shrinking the window vertically won't reposition the image */
  position: relative;
  /* A child of this element is using position:absolute, which requires a parent using position:relative */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* Allows you to clip an element's shape down to a specified polygon */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    /* Centering trick */
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center; }
